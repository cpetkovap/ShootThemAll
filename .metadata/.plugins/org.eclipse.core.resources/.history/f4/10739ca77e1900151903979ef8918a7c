package controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeMap;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import model.User;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import db.DBManager;

/**
 * Servlet implementation class LeaderBord
 */
@WebServlet("/leaderBoard")
public class LeaderBoard extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public LeaderBoard() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// репрезентация на класация
		String line = request.getParameter("userId");
		
		//test
		line = "2";
		
		JSONArray result = new JSONArray();
		JSONObject error = new JSONObject();

		if (line != null) {
			int userId = Integer.parseInt(line);
			int userPosition = -1;

			int count = 10;
			
			//използваме кеша -> друг вариант е от базата данни
			ArrayList<User> list = (ArrayList<User>) getServletConfig()
					.getServletContext().getAttribute("cacheUsers");
			list.sort(new UsersComparator());
			for (Iterator<User> i = list.iterator(); i.hasNext();) {
				User u = i.next();
				if (u.getId() == userId) {
					userPosition = list.indexOf(u);

				}
				
				if (count > 0) {
					JSONObject userObj = new JSONObject();
					userObj.put("position", list.indexOf(u) + 1);
					userObj.put("username", u.getUsername());
					userObj.put("score", u.getScore());
					result.add(userObj);
				}
				count--;

			}
			
			if(userPosition > 9){
				JSONObject userObj = new JSONObject();
				userObj.put("position", (userPosition + 1));
				userObj.put("username", list.get(userPosition).getUsername());
				userObj.put("score", list.get(userPosition).getUsername());
				result.add(userObj);
			}
			
			response.setStatus(200);

		}else{
			response.setStatus(400);
			error.put("error", "Invalid parameter");
		}
		
		System.out.println(result.toJSONString());
		response.getWriter().write(result.toJSONString());
	}
	
	
	
	public TreeMap<String, Integer> topUsers(int userId){
		 Connection connect = DBManager.getDBManager().getConnection();
		 TreeMap<String, Integer> topUsers= new TreeMap();
		 Statement statement;
		 PreparedStatement preparedStatement;
			try {

				preparedStatement = connect.prepareStatement("SELECT (USERNAME, SCORE) FROM APP.USERS WHERE ID = ?");
				preparedStatement.setInt(1, userId);
				ResultSet resultSet = statement.executeQuery();
				
				statement = connect.createStatement();
				ResultSet resultSet = statement.executeQuery("SELECT (USERNAME, SCORE) FROM APP.USERS");
				while(resultSet.next()){
					String username = resultSet.getString("username");
					int score = resultSet.getInt("score");
					topUsers.put(username, score);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				System.out.println("1");
			}
		 return topUsers;
		
	}

}
