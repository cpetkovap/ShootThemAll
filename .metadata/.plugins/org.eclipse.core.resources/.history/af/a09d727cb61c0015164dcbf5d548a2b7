package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.User;
import model.Weapon;
import db.DBManager;

public class DBUserDao implements UserDao {
	private Connection connection = DBManager.getDBManager().getConnection();
	

	@Override
	public List getAllUsers() {
		ArrayList<User> users = new ArrayList<User>();
		Statement st;
		PreparedStatement pst;
		try {
			connection.setAutoCommit(false);
			st = connection.createStatement();
			ResultSet results = st
					.executeQuery("select id, username, password, email,"
							+ " notificationAllow, levelNo, score, "
							+ "choosen_weapon_id,last_activity_on from app.users");
			while (results.next()) {
				int id = results.getInt("id");
				String username = results.getString("username");
				String password = results.getString("password");
				String email = results.getString("email");
				boolean notificationAllow = results.getInt("notificationAllow") == 0 ? false
						: true;
				int levelNo = results.getInt("levelNo");
				int score = results.getInt("score");
				int weapon_id = results.getInt("choosen_weapon_id");
				Date date = results.getDate("last_activity_on");
					if(date == null){
						this.updateCurrentDate(id);
						date = new Date();
					}
				
			 pst = connection
						.prepareStatement("select damage, price from app.weapons where id = ?");
				pst.setInt(1, weapon_id);
				ResultSet rs = pst.executeQuery();
				rs.next();
				int damage = rs.getInt("damage");
				int price = rs.getInt("price");
				connection.commit();
				if(id < 0 || username == null || username == "" || password == null || password == "" || email == null || email == "" || levelNo <0 || score<0 || weapon_id<=0 ){
					System.out.println("Ivalid data from db - user");
					//throw IllegalArgumentException;
				}
				
				if(damage<=0 || price<=0){
					System.out.println("Ivalid data from db - weapon");
					//throw IllegalArgumentException;
				}
				User user = new User(id, username, password, email, score,
						levelNo, new Weapon(weapon_id, damage, price),
						notificationAllow,date);
				users.add(user);

			}
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("error rollback");
				e1.printStackTrace();
			}
			System.out.println("error in select all users");
			e.printStackTrace();
		}
		return users;
	}
  
    
	@Override
	public User getUser(int userId) {
		User user = null;
		PreparedStatement pst;
		if(userId<=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
		}
		try {
			connection.setAutoCommit(false);
			 pst = connection
					.prepareStatement("select username, password, email, notificationAllow, levelNo, score, choosen_weapon_id,last_activity_on from app.users where id = ?");
			pst.setInt(1, userId);
			ResultSet results = pst.executeQuery();
			results.next();
			String username = results.getString("username");
			String password = results.getString("password");
			String email = results.getString("email");
			boolean notificationAllow = results.getInt("notificationAllow") == 0 ? false
					: true;
			int levelNo = results.getInt("levelNo");
			int score = results.getInt("score");
			int weapon_id = results.getInt("choosen_weapon_id");
			Date date = results.getDate("last_activity_on");
			if(date == null){
				this.updateCurrentDate(userId);
				date = new Date();
			}
		
			 pst = connection
					.prepareStatement("select damage, price from app.weapons where id = ?");
			pst.setInt(1, weapon_id);
			ResultSet rs = pst.executeQuery();
			rs.next();
			int damage = rs.getInt("damage");
			int price = rs.getInt("price");
			connection.commit();
			if(username == null || username == "" || password == null || password == "" || email == null || email == "" || levelNo <=0 || score<=0 || weapon_id<=0  ){
				System.out.println("Ivalid data from db");
				//throw IllegalArgumentException;
			}
			if(damage<=0 || price<=0){
				System.out.println("Ivalid data from db");
				//throw IllegalArgumentException;
			}
			user = new User(userId, username, password, email, score, levelNo,
					new Weapon(weapon_id, damage, price), notificationAllow,date);

		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("error in rollback");
				e1.printStackTrace();
			}
			System.out.println("error in select user by id");
			e.printStackTrace();
		}
		return user;
	}

	@Override
	public User getUser(String username) {
		PreparedStatement pst;
		User user = null;
		if(username == null || username == ""){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
		}
		try {
			connection.setAutoCommit(false);
			pst = connection
					.prepareStatement("select id, password, email, notificationAllow, levelNo, score, choosen_weapon_id,last_activity_on from app.users where username = ?");
			pst.setString(1, username);
			ResultSet results = pst.executeQuery();
			if (results != null) {
				results.next();
				int id = results.getInt("id");
				String password = results.getString("password");
				String email = results.getString("email");
				boolean notificationAllow = results.getInt("notificationAllow") == 0 ? false
						: true;
				int levelNo = results.getInt("levelNo");
				int score = results.getInt("score");
				int weapon_id = results.getInt("choosen_weapon_id");
				Date date = results.getDate("last_activity_on");
				if(date == null){
					this.updateCurrentDate(id);
					date = new Date();
				}
			
				 pst = connection
						.prepareStatement("select damage, price from app.weapons where id = ?");
				pst.setInt(1, weapon_id);
				ResultSet rs = pst.executeQuery();
				rs.next();
				int damage = rs.getInt("damage");
				int price = rs.getInt("price");
				connection.commit();
				if(id == 0 || username == null || username == "" || password == null || password == "" || email == null || email == "" || levelNo <0 || score<0 || weapon_id<0  ){
					System.out.println("Ivalid data from db");
					//throw IllegalArgumentException;
				}
				if(damage<=0 || price<=0){
					System.out.println("Ivalid data from db");
					//throw IllegalArgumentException;
				}
				user = new User(id, username, password, email, score, levelNo,
						new Weapon(weapon_id, damage, price), notificationAllow);
			}

		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			System.out.println("error in select user by name");
			e.printStackTrace();
		}
		return user;
	}

	@Override
	public int addUser(User u) {
		PreparedStatement pst;
		int userId = -1;
		if(u == null){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
		}
		String insertInUser = "insert into app.users (username, password, email, last_activity_on) "
				+ " values (?,?,?,?) ";
		String insertInUnlockWeapon = "insert into app.unlockedWeapons (user_id, weapon_id) values(?, ?)";
		try {
			connection.setAutoCommit(false);
			pst = connection.prepareStatement(insertInUser,
					PreparedStatement.RETURN_GENERATED_KEYS);
			pst.setString(1, u.getUsername());
			pst.setString(2, u.getPassword());
			pst.setString(3, u.getEmail());
			SimpleDateFormat sdf = 
					new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
			pst.setString(4, sdf.format(new Date()));
			pst.executeUpdate();
			ResultSet rs = pst.getGeneratedKeys();
			if (rs != null && rs.next()) {
				userId = rs.getInt(1);
			}

			pst = connection
					.prepareStatement(insertInUnlockWeapon);
			pst.setInt(1, userId);
			pst.setInt(2, 1);
			pst.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("Error rollback");
				e1.printStackTrace();
			}
			System.out.println("error insert user");
			e.printStackTrace();
		}
		return userId;

	}

	@Override
	public void deleteUser(int userId) {
		PreparedStatement pst;
		if(userId<=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
		}
		try {
				connection.setAutoCommit(false);
			
		//delete user - user_id from unlockedWeapons
			pst = connection
					.prepareStatement("delete from app.unlockedWeapons where user_id = ?");
			pst.setInt(1, userId);
			pst.executeUpdate();
			
		//delete user - user_id from userAchievements
			pst = connection
					.prepareStatement("delete from app.userAchievements where user_id= = ?");
			pst.setInt(1, userId);
			pst.executeUpdate();
			
		//delete user from Users
			pst = connection
					.prepareStatement("delete from app.users where id = ?");
			pst.setInt(1, userId);
			pst.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("Error rollback");
				e1.printStackTrace();
			}
			e.printStackTrace();
			System.out.println("Error deleting user");
		}

	}

	// Change password update
	@Override
	public void updatePassword(String password, int userId) {
		PreparedStatement pst;
		if(password == null || password == "" || userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			
			pst = connection
					.prepareStatement("update app.users set password = ? where id =?");
			pst.setString(1, password);
			pst.setInt(2, userId);
			pst.executeUpdate();
		
		} catch (SQLException e) {
			System.out.println("Error with updating password!");
			e.printStackTrace();
		}

	}

	// update e-mail
	@Override
	public void updateEmail(String email, int userId) {
		PreparedStatement pst;
		if(email == null || email == "" || userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			pst = connection
					.prepareStatement("update app.users set email = ? where id =?");
			pst.setString(1, email);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating email!");
			e.printStackTrace();
		}
	}

	// Update score
	@Override
	public void updateScore(int score, int userId) {
		PreparedStatement pst;
		if(score<0 || userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			pst = connection
					.prepareStatement("update app.users set score = score + ? where id =?");
			pst.setInt(1, score);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating score!");
			e.printStackTrace();
		}
	}

	// Update level  - input levelNo
	@Override
	public void updateLevel(int level, int userId) {
		PreparedStatement pst;
		if(level<0 || userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			pst = connection
					.prepareStatement("update app.users set levelNo =  ? where id =?");
			pst.setInt(1, level);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating level!");
			e.printStackTrace();
		}
	}

	// update level - levelUp
	@Override
	public void updateLevelUp(int userId) {
		PreparedStatement pst;
		if(userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			pst = connection
					.prepareStatement("update app.users set levelNo = levelNo +1 where id =?");
			pst.setInt(1, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating level!");
			e.printStackTrace();
		}
	}

	// Update notification
	@Override
	public void updateNotification(boolean noficationAllow, int userId) {
		PreparedStatement pst;
		int notificationINT = 0;
		if( userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			pst = connection
					.prepareStatement("update app.users set notificationAllow = ? where id =?");
			if (noficationAllow == true)
				notificationINT = 1;
			pst.setInt(1, notificationINT);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating notification!");
			e.printStackTrace();
		}
	}

	 @Override
		public void updateCurrentDate (int userId){
	    	PreparedStatement pst;
			if(  userId <=0){
				System.out.println("ValidationException");
				//throw IllegalArgumentException;
				}
			try {
				SimpleDateFormat sdf = 
						new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
				pst = connection
						.prepareStatement("update app.users set last_activity_on = ? where id =?");
				pst.setString(1, sdf.format(new Date()));
				pst.setInt(2, userId);
				pst.executeUpdate();
			
			} catch (SQLException e) {
				System.out.println("Error with updating data!");
				e.printStackTrace();
			}
		}
	//updare user weapon
	 @Override
		public void updateUserWeapon(int weaponType, int userId){
			PreparedStatement pst;
			try {
				pst = connection
						.prepareStatement("update app.users set choosen_weapon_id = ? where id = ?");
				pst.setInt(1, weaponType);
				pst.setInt(2, userId);
				pst.executeUpdate();
			} catch (SQLException e) {
				System.out.println("Error with updating level!");
				e.printStackTrace();
			}
			
		}

	 @Override
		public void addUnlockedWeapon(int weaponType, int userId){
			String insertUnlockedWeapon = "insert into APP.UnlockedWeapons (user_id, weapon_id) "
					+ " values (?,?) ";
			try {
				connection.setAutoCommit(false);
				PreparedStatement pst = connection.prepareStatement(insertUnlockedWeapon);
				pst.setInt(1, userId);
				pst.setInt(2, weaponType);			
				pst.executeUpdate();			
				connection.commit();
			} catch (SQLException e) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					System.out.println("Error rollback");
					e1.printStackTrace();
				}
				System.out.println("error insert user");
				e.printStackTrace();
			}
		}

	@Override
	public int existUser(String username, String password) {
		PreparedStatement pst;
		int userId = -1;
		if(username== null || username == "" || password == null || password == ""){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			String selecQuery = "select id, username , password from app.users where username = ? and password = ?";
			pst = connection.prepareStatement(selecQuery);
			pst.setString(1, username);
			pst.setString(2, password);
			ResultSet results = pst.executeQuery();
			if (results != null) {
				results.next();
				userId = results.getInt("id");
			}

		} catch (SQLException e) {
			System.out.println("error in existUser");
			e.printStackTrace();
		}
		return userId;
	}

	
	@Override
	public Weapon getUserWeapon(int userId) {
		PreparedStatement pst;
		Weapon weapon = null;
		if(userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			connection.setAutoCommit(false);
			String selectWeaponId = "select choosen_weapon_id from app.users where id = ?";
			pst = connection.prepareStatement(selectWeaponId);
			pst.setInt(1, userId);
			ResultSet results = pst.executeQuery();

			results.next();
			int weapon_id = results.getInt("choosen_weapon_id");

			pst = connection
					.prepareStatement("select damage, price from app.weapons where id = ?");
			pst.setInt(1, weapon_id);
			ResultSet rs = pst.executeQuery();
			rs.next();
			int damage = rs.getInt("damage");
			int price = rs.getInt("price");
			if(damage<=0 || price<=0){
				System.out.println("Ivalid data from db");
				//throw IllegalArgumentException;
				}
			weapon = new Weapon(weapon_id, damage, price);
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			System.out.println("error in getting user`s weapon");
			e.printStackTrace();
		}
		return weapon;
	}

	@Override
	public int getUserScore(int userId) {
		int score = 0;
		PreparedStatement pst;
		if( userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			String selectScore = "select score from APP.USERS where id = ?";
			pst = connection.prepareStatement(selectScore);

			pst.setInt(1, userId);
			ResultSet results = pst.executeQuery();
			results.next();
			score = results.getInt("score");
		} catch (SQLException e) {
			System.out.println("Error in getting user`s score.");
			e.printStackTrace();
		}
		return score;
	}
	
@Override
	public int getUserLevel(int userId) {
		int level = 0;
		PreparedStatement pst;
		if( userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			String selectScore = "select levelNo from APP.USERS where id = ?";
			pst = connection.prepareStatement(selectScore);
			pst.setInt(1, userId);
			ResultSet results = pst.executeQuery();
			results.next();
			level = results.getInt("levelNo");
		} catch (SQLException e) {
			System.out.println("Error in getUserLevel.");
			e.printStackTrace();
		}
		return level;

	}
@Override
	public boolean hasQuery() {
		boolean result = false;
		int count = 0;
		Statement st;
		try {
			st = connection.createStatement();
			ResultSet results = st
					.executeQuery("select count(*) from app.users");
			results.next();
			count = results.getInt(1);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		if (count > 0) {
			result = true;
		}
		System.out.println("num rows in user : " + count);
		return result;

	}
@Override
	public ArrayList<Integer> getUnlockedWeapons(int userId) {
		ArrayList<Integer> weapon = new ArrayList<Integer>();
		PreparedStatement pst;
		if( userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			String selectWeapon = "select weapon_id from APP.UnlockedWeapons where user_id  = ?";
			pst = connection.prepareStatement(selectWeapon);
			pst.setInt(1, userId);
			ResultSet results = pst.executeQuery();
			while (results.next()) {
				Integer weaponId = results.getInt("weapon_id");
				if(weaponId == null || weaponId <0 ){
					System.out.println("ValidationException");
					//throw IllegalArgumentException;
					}
				System.out.println(weaponId);
				weapon.add(weaponId);
			}
		} catch (SQLException e) {
		System.out.println("Error in getUnlockedWeapons");
			e.printStackTrace();
		}

		return weapon;
	}
	
	public int getMaxScore(){
		int score = -1; 
		Statement st;
		try {
			st = connection.createStatement();
			ResultSet results = st
					.executeQuery("select max(score) as maxScore from app.users");
			results.next();
			score = results.getInt("maxScore");
			if(score<0){
				System.out.println("Error output from db");
				//throw IllegalArgumentException;
				}
		}catch(SQLException e){
			System.out.println("Error in getMaxScore");
			e.printStackTrace();
		}
		return score;
		
	}

	public User getUserWithMaxScore() {
		User user = null;
		PreparedStatement pst;
		try {
			String selectUserWithMaxScore = "select id, username, password, email from app.users where score = ?";			
			pst = connection.prepareStatement(selectUserWithMaxScore);
			int score = getMaxScore();
			pst.setInt(1, score);
			pst.setMaxRows(1);
			ResultSet results = pst
					.executeQuery();
			while(results.next()){
				int id = results.getInt("id");
				String username = results.getString("username");
				String password = results.getString("password");
				String email = results.getString("email");
				user = new User(id, username, password, email);
				user.setScore(score);
			}
		} catch (SQLException e) {
			System.out.println("error in getUserWithMaxScore");
			e.printStackTrace();
		}
		return user;

	}
	
	@Override
	public int getUserPosition (int userId){
		PreparedStatement pst;
		int userPosition = 0;
		if( userId <=0){
			System.out.println("ValidationException");
			//throw IllegalArgumentException;
			}
		try {
			int userScore = getUserScore(userId);
			pst = connection
					.prepareStatement("select count(*) as count from app.users where score > ? ");
			pst.setInt(1, userScore);
			ResultSet countUsers = pst.executeQuery();
			countUsers.next();
			userPosition = countUsers.getInt("count");
			}catch(SQLException e){
				e.printStackTrace();
			}
		return userPosition;
	}
	
	public ArrayList<User> getTopUsers(){
		ArrayList<User> topUsers = new ArrayList<User>();
		Statement statement;
		try {
			statement = connection.createStatement();
			statement.setMaxRows(10);
			ResultSet resultSet = statement
					.executeQuery("select id, username, score from app.users order by score desc");
			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String username = resultSet.getString("username");
				int score = resultSet.getInt("score");
				if(username == null || username == ""){
					System.out.println("Error output from db");
					//throw IllegalArgumentException;
			}
				User u = new User(username, "default");
				
				u.setScore(score);
				topUsers.add(u);
			}
			}catch(SQLException e){
				System.out.println("Error in getTopUsers");
				e.printStackTrace();
			}
		return topUsers;
	}
	
	public boolean getUserNotification(){
		boolean result = false;
		
		//to do 
		return result;
	}
}
