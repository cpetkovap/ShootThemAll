package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.User;
import model.Weapon;
import db.DBManager;

public class DBUserDao implements UserDao {
	private Connection connection = DBManager.getDBManager().getConnection();

	@Override
	public List getAllUsers() {
		ArrayList<User> users = new ArrayList<User>();
		WeaponDao wd = new DBWeaponDao();
		User user = null;
		Statement st = null;
		ResultSet results = null;
		try {
			st = connection.createStatement();
			results = st.executeQuery("select id, username, password, email,"
					+ " notificationAllow, levelNo, score, "
					+ "choosen_weapon_id,last_activity_on from app.users");
			while (results.next()) {
				int id = results.getInt("id");
				String username = results.getString("username");
				String password = results.getString("password");
				String email = results.getString("email");
				boolean notificationAllow = results.getInt("notificationAllow") == 0 ? false
						: true;
				int levelNo = results.getInt("levelNo");
				int score = results.getInt("score");
				int weapon_id = results.getInt("choosen_weapon_id");
				Date date = results.getDate("last_activity_on");
				Weapon weapon = wd.getWeapon(weapon_id);
				if (id < 0 || username == null || username == ""
						|| password == null || password == "" || email == null
						|| email == "" || levelNo < 0 || score < 0
						|| weapon_id < 0) {
					System.out.println("Ivalid data from db - user");
					// throw IllegalArgumentException;
				}
				if (date != null) {
					user = new User(id, username, password, email, score,
							levelNo, weapon, notificationAllow, date);
				} else {
					user = new User(id, username, password, email, score,
							levelNo, weapon, notificationAllow);
				}
				users.add(user);
			}
		} catch (SQLException e) {
			System.out.println("Error in select all users");
			//e.printStackTrace();
		} finally {
			try {
				if (st != null) {
					st.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return users;
	}

	@Override
	public User getUser(int userId) {
		User user = null;
		WeaponDao wd = new DBWeaponDao();
		PreparedStatement pst = null;
		ResultSet results = null;
		if (userId < 0) {
			System.out.println("ValidationException ");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("select username, password, email, notificationAllow, levelNo, score, choosen_weapon_id,last_activity_on from app.users where id = ?");
			pst.setInt(1, userId);
			results = pst.executeQuery();
			results.next();
			String username = results.getString("username");
			String password = results.getString("password");
			String email = results.getString("email");
			boolean notificationAllow = results.getInt("notificationAllow") == 0 ? false
					: true;
			int levelNo = results.getInt("levelNo");
			int score = results.getInt("score");
			int weapon_id = results.getInt("choosen_weapon_id");
			Date date = results.getDate("last_activity_on");
			Weapon weapon = wd.getWeapon(weapon_id);

			if (username == null || username == "" || password == null
					|| password == "" || email == null || email == ""
					|| levelNo < 0 || score < 0 || weapon_id < 0) {
				System.out.println("Ivalid data from db");
				// throw IllegalArgumentException;
			}
			if (date != null) {
				user = new User(userId, username, password, email, score,
						levelNo, weapon, notificationAllow, date);
			} else {
				user = new User(userId, username, password, email, score,
						levelNo, weapon, notificationAllow);
			}
		} catch (SQLException e) {
			System.out.println("error in select user by id");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return user;
	}

	@Override
	public User getUser(String username) {
		User user = null;
		WeaponDao wd = new DBWeaponDao();
		PreparedStatement pst = null;
		ResultSet result = null;

		if (username == null || username == "") {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("select id, password, email, notificationAllow, levelNo, score, choosen_weapon_id,last_activity_on from app.users where username = ?");
			pst.setString(1, username);
			result = pst.executeQuery();
			if (result != null) {
				result.next();
				int id = result.getInt("id");
				String password = result.getString("password");
				String email = result.getString("email");
				boolean notificationAllow = result.getInt("notificationAllow") == 0 ? false
						: true;
				int levelNo = result.getInt("levelNo");
				int score = result.getInt("score");
				int weapon_id = result.getInt("choosen_weapon_id");
				Date date = result.getDate("last_activity_on");
				Weapon weapon = wd.getWeapon(weapon_id);
				if (id < 0 || username == null || username == ""
						|| password == null || password == "" || email == null
						|| email == "" || levelNo < 0 || score < 0
						|| weapon_id < 0) {
					System.out.println("Ivalid data from db");
					// throw IllegalArgumentException;
				}
				if (date != null) {
					user = new User(id, username, password, email, score,
							levelNo, weapon, notificationAllow, date);
				} else {
					user = new User(id, username, password, email, score,
							levelNo, weapon, notificationAllow);
				}
			}
		} catch (SQLException e) {
			System.out.println("error in select user by name");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (result != null) {
					result.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return user;
	}

	@Override
	public int addUser(User u) {
		PreparedStatement pst = null;
		PreparedStatement pst2 = null;
		ResultSet result = null;
		int userId = -1;
		if (u == null) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		String insertIntoUser = "insert into app.users (username, password, email, last_activity_on) "
				+ " values (?,?,?,?) ";
		String insertInUnlockWeapon = "insert into app.unlockedWeapons (user_id, weapon_id) values(?, ?)";
		try {
			connection.setAutoCommit(false);
			pst = connection.prepareStatement(insertIntoUser,
					PreparedStatement.RETURN_GENERATED_KEYS);
			pst.setString(1, u.getUsername());
			pst.setString(2, u.getPassword());
			pst.setString(3, u.getEmail());
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			pst.setString(4, sdf.format(new Date()));
			pst.executeUpdate();
			result = pst.getGeneratedKeys();
			if (result != null && result.next()) {
				userId = result.getInt(1);
			}

			pst2 = connection.prepareStatement(insertInUnlockWeapon);
			pst2.setInt(1, userId);
			pst2.setInt(2, 1);
			pst2.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("Error rollback");
				//e1.printStackTrace();
			}
			System.out.println("error insert user");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (pst2 != null) {
					pst2.close();
				}
				if (result != null) {
					result.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
		return userId;

	}

	@Override
	public void deleteUser(int userId) {
		PreparedStatement pst = null;
		PreparedStatement pst2 = null;
		PreparedStatement pst3 = null;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			connection.setAutoCommit(false);

			// delete user - user_id from unlockedWeapons
			pst = connection
					.prepareStatement("delete from app.unlockedWeapons where user_id = ?");
			pst.setInt(1, userId);
			pst.executeUpdate();

			// delete user - user_id from userAchievements
			pst2 = connection
					.prepareStatement("delete from app.userAchievements where user_id= = ?");
			pst2.setInt(1, userId);
			pst2.executeUpdate();

			// delete user from Users
			pst3 = connection
					.prepareStatement("delete from app.users where id = ?");
			pst3.setInt(1, userId);
			pst3.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("Error rollback");
				//e1.printStackTrace();
			}
			e.printStackTrace();
			System.out.println("Error deleting user");
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (pst2 != null) {
					pst2.close();
				}
				if (pst2 != null) {
					pst2.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	// Change password update
	@Override
	public void updatePassword(String password, int userId) {
		PreparedStatement pst = null;
		if (password == null || password == "" || userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {

			pst = connection
					.prepareStatement("update app.users set password = ? where id =?");
			pst.setString(1, password);
			pst.setInt(2, userId);
			pst.executeUpdate();

		} catch (SQLException e) {
			System.out.println("Error with updating password!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}

	}

	// update e-mail
	@Override
	public void updateEmail(String email, int userId) {
		PreparedStatement pst = null;
		if (email == null || email == "" || userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("update app.users set email = ? where id =?");
			pst.setString(1, email);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating email!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	// Update score
	@Override
	public void updateScore(int score, int userId) {
		PreparedStatement pst = null;
		if (score < 0 || userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("update app.users set score = score + ? where id =?");
			pst.setInt(1, score);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating score!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	// Update level - input levelNo
	@Override
	public void updateLevel(int level, int userId) {
		PreparedStatement pst = null;
		if (level < 0 || userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("update app.users set levelNo =  ? where id =?");
			pst.setInt(1, level);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating level!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	// update level - levelUp
	@Override
	public void updateLevelUp(int userId) {
		PreparedStatement pst = null;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("update app.users set levelNo = levelNo +1 where id =?");
			pst.setInt(1, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating level!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	// Update notification
	@Override
	public void updateNotification(boolean noficationAllow, int userId) {
		PreparedStatement pst = null;
		int notificationINT = 0;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("update app.users set notificationAllow = ? where id =?");
			if (noficationAllow == true)
				notificationINT = 1;
			pst.setInt(1, notificationINT);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating notification!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	@Override
	public void updateCurrentDate(int userId) {
		PreparedStatement pst = null;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			pst = connection
					.prepareStatement("update app.users set last_activity_on = ? where id =?");
			pst.setString(1, sdf.format(new Date()));
			pst.setInt(2, userId);
			pst.executeUpdate();

		} catch (SQLException e) {
			System.out.println("Error with updating data!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	// updare user weapon
	@Override
	public void updateUserWeapon(int weaponType, int userId) {
		PreparedStatement pst = null;
		if (userId < 0 || weaponType < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			pst = connection
					.prepareStatement("update app.users set choosen_weapon_id = ? where id = ?");
			pst.setInt(1, weaponType);
			pst.setInt(2, userId);
			pst.executeUpdate();
		} catch (SQLException e) {
			System.out.println("Error with updating level!");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	@Override
	public void addUnlockedWeapon(int weaponType, int userId) {
		PreparedStatement pst = null;
		if (userId < 0 || weaponType < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		String insertUnlockedWeapon = "insert into APP.UnlockedWeapons (user_id, weapon_id) "
				+ " values (?,?) ";
		try {
			connection.setAutoCommit(false);
			pst = connection.prepareStatement(insertUnlockedWeapon);
			pst.setInt(1, userId);
			pst.setInt(2, weaponType);
			pst.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("Error rollback");
				//e1.printStackTrace();
			}
			System.out.println("error insert user");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
	}

	@Override
	public int existUser(String username, String password) {
		PreparedStatement pst = null;
		int userId = -1;
		if (username == null || username == "" || password == null
				|| password == "") {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			String selecQuery = "select id, username , password from app.users where username = ? and password = ?";
			pst = connection.prepareStatement(selecQuery);
			pst.setString(1, username);
			pst.setString(2, password);
			ResultSet results = pst.executeQuery();
			if (results != null) {
				results.next();
				userId = results.getInt("id");
			}

		} catch (SQLException e) {
			System.out.println("error in existUser");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
		return userId;
	}

	@Override
	public Weapon getUserWeapon(int userId) {
		PreparedStatement pst = null;
		PreparedStatement pst2 = null;
		ResultSet result = null;
		ResultSet result2 = null;

		Weapon weapon = null;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			connection.setAutoCommit(false);
			String selectWeaponId = "select choosen_weapon_id from app.users where id = ?";
			pst = connection.prepareStatement(selectWeaponId);
			pst.setInt(1, userId);
			result = pst.executeQuery();

			result.next();
			int weapon_id = result.getInt("choosen_weapon_id");

			pst2 = connection
					.prepareStatement("select damage, price from app.weapons where id = ?");
			pst2.setInt(1, weapon_id);
			result2 = pst2.executeQuery();
			result2.next();
			int damage = result2.getInt("damage");
			int price = result2.getInt("price");
			if (damage <= 0 || price <= 0) {
				System.out.println("Ivalid data from db");
				// throw IllegalArgumentException;
			}
			weapon = new Weapon(weapon_id, damage, price);
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				//e1.printStackTrace();
			}
			System.out.println("error in getting user`s weapon");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (pst2 != null) {
					pst2.close();
				}
				if (result != null) {
					result.close();
				}
				if (result2 != null) {
					result2.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
		return weapon;
	}

	@Override
	public int getUserScore(int userId) {
		PreparedStatement pst = null;
		ResultSet result = null;
		int score = 0;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			String selectScore = "select score from APP.USERS where id = ?";
			pst = connection.prepareStatement(selectScore);

			pst.setInt(1, userId);
			result = pst.executeQuery();
			result.next();
			score = result.getInt("score");
		} catch (SQLException e) {
			System.out.println("Error in getting user`s score.");
			//e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (result != null) {
					result.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				//e.printStackTrace();
			}
		}
		return score;
	}

	@Override
	public int getUserLevel(int userId) {
		int level = 0;
		PreparedStatement pst = null;
		ResultSet result = null;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			String selectScore = "select levelNo from APP.USERS where id = ?";
			pst = connection.prepareStatement(selectScore);
			pst.setInt(1, userId);
			result = pst.executeQuery();
			result.next();
			level = result.getInt("levelNo");
		} catch (SQLException e) {
			System.out.println("Error in getUserLevel.");
			e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (result != null) {
					result.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return level;

	}

	@Override
	public boolean hasQuery() {
		boolean result = false;
		int count = 0;
		Statement st = null;
		ResultSet results = null;
		try {
			st = connection.createStatement();
			results = st.executeQuery("select count(*) from app.users");
			results.next();
			count = results.getInt(1);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (st != null) {
					st.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		if (count > 0) {
			result = true;
		}
		System.out.println("num rows in user : " + count);
		return result;

	}

	@Override
	public ArrayList<Integer> getUnlockedWeapons(int userId) {
		ArrayList<Integer> weapon = new ArrayList<Integer>();
		PreparedStatement pst = null;
		ResultSet results = null;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			String selectWeapon = "select weapon_id from APP.UnlockedWeapons where user_id  = ?";
			pst = connection.prepareStatement(selectWeapon);
			pst.setInt(1, userId);
			results = pst.executeQuery();
			while (results.next()) {
				Integer weaponId = results.getInt("weapon_id");
				if (weaponId == null || weaponId < 0) {
					System.out.println("ValidationException");
					// throw IllegalArgumentException;
				}
				weapon.add(weaponId);
			}
		} catch (SQLException e) {
			System.out.println("Error in getUnlockedWeapons");
			e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}

		return weapon;
	}

	public int getMaxScore() {
		int score = -1;
		Statement st = null;
		ResultSet results = null;
		try {
			st = connection.createStatement();
			results = st
					.executeQuery("select max(score) as maxScore from app.users");
			results.next();
			score = results.getInt("maxScore");
			if (score < 0) {
				System.out.println("Error output from db");
				// throw IllegalArgumentException;
			}
		} catch (SQLException e) {
			System.out.println("Error in getMaxScore");
			e.printStackTrace();
		} finally {
			try {
				if (st != null) {
					st.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return score;

	}

	public User getUserWithMaxScore() {
		User user = null;
		PreparedStatement pst = null;
		ResultSet results = null;
		try {
			String selectUserWithMaxScore = "select id, username, password, email,notificationAllow from app.users where score = ?";
			pst = connection.prepareStatement(selectUserWithMaxScore);
			int score = getMaxScore();
			pst.setInt(1, score);
			pst.setMaxRows(1);
			results = pst.executeQuery();
			while (results.next()) {
				int id = results.getInt("id");
				String username = results.getString("username");
				String password = results.getString("password");
				String email = results.getString("email");
				boolean notificationAllow = results.getInt("notificationAllow") == 0 ? false
						: true;
				user = new User(id, username, password, email);
				user.setScore(score);
				user.setAllowNotification(notificationAllow);
			}
		} catch (SQLException e) {
			System.out.println("error in getUserWithMaxScore");
			e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return user;
	}

	@Override
	public int getUserPosition(int userId) {
		PreparedStatement pst = null;
		ResultSet countUsers = null;
		int userPosition = 0;
		if (userId < 0) {
			System.out.println("ValidationException");
			// throw IllegalArgumentException;
		}
		try {
			int userScore = getUserScore(userId);
			pst = connection
					.prepareStatement("select count(*) as count from app.users where score > ? ");
			pst.setInt(1, userScore);
			countUsers = pst.executeQuery();
			countUsers.next();
			userPosition = countUsers.getInt("count");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pst != null) {
					pst.close();
				}
				if (countUsers != null) {
					countUsers.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return userPosition;
	}

	public ArrayList<User> getTopUsers() {
		ArrayList<User> topUsers = new ArrayList<User>();
		Statement st = null;
		ResultSet results = null;
		try {
			st = connection.createStatement();
			st.setMaxRows(10);
			results = st
					.executeQuery("select id, username, score from app.users order by score desc");
			while (results.next()) {
				int id = results.getInt("id");
				String username = results.getString("username");
				int score = results.getInt("score");
				if (username == null || username == "") {
					System.out.println("Error output from db");
					// throw IllegalArgumentException;
				}
				User u = new User(username, "default");

				u.setScore(score);
				topUsers.add(u);
			}
		} catch (SQLException e) {
			System.out.println("Error in getTopUsers");
			e.printStackTrace();
		} finally {
			try {
				if (st != null) {
					st.close();
				}
				if (results != null) {
					results.close();
				}
			} catch (SQLException e) {
				System.out.println("Error in closing.");
				e.printStackTrace();
			}
		}
		return topUsers;
	}

}
